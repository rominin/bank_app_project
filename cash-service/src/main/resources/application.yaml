server:
  port: 8083

spring:
  application:
    name: cash-service

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI:http://localhost:8080/realms/bank-app}

      client:
        registration:
          cash-service:
            authorizationGrantType: client_credentials
            provider: keycloak
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_CASH_SERVICE_CLIENT_ID:cash-service_m2m}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_CASH_SERVICE_CLIENT_SECRET:ZkXS0uBiuTdDkUl0iONVxlWZkLN2E3oR}
        provider:
          keycloak:
            token-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI:http://localhost:8080/realms/bank-app/protocol/openid-connect/token}

management:
  endpoints:
    web:
      exposure:
        include: health ,  refresh
  endpoint:
    health:
      show-details: always

logging:
  level:
    org.springframework.security: DEBUG
    io.github.resilience4j.retry: DEBUG

resilience4j:
  circuitbreaker:
    instances:
      accountCircuitBreaker, updateCircuitBreaker, checkBlockCircuitBreaker, notifyCircuitBreaker:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s

  retry:
    instances:
      accountRetry, updateRetry, checkBlockRetry, notifyRetry:
        max-attempts: 3
        wait-duration: 1s

# properties previously residing in consul:
blocker-service:
  url: ${BLOCKER_SERVICE_URL:http://localhost:8082/check}
notification-service:
  url: ${NOTIFICATON_SERVICE_URL:http://localhost:8087/notify}
account-service:
  url: ${ACCOUNT_SERVICE_URL:http://localhost:8081/accounts}