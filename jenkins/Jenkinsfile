pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'commondb'
        DB_USER         = 'common_user'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                stage('Accounts Service') {
                    steps {
                        dir('accounts-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Blocker Service') {
                    steps {
                        dir('blocker-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Cash Service') {
                    steps {
                        dir('cash-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Exchange Generator Service') {
                    steps {
                        dir('exchange-generator-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Exchange Service') {
                    steps {
                        dir('exchange-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Front UI Service') {
                    steps {
                        dir('front-ui') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Notification Service') {
                    steps {
                        dir('notification-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Transfer Service') {
                    steps {
                        dir('transfer-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/accounts-service:${IMAGE_TAG} accounts-service
                docker build -t ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG} blocker-service
                docker build -t ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG} cash-service
                docker build -t ${DOCKER_REGISTRY}/exchange-generator-service:${IMAGE_TAG} exchange-generator-service
                docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} exchange-service
                docker build -t ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG} front-ui
                docker build -t ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG} notification-service
                docker build -t ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG} transfer-service
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                    docker push ${DOCKER_REGISTRY}/accounts-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-generator-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Install PostgreSQL to TEST') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install common-db bitnami/postgresql \\
                  --version 14.2.3 \\
                  --namespace test --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.existingSecret=bank-app-common-db-postgresql \\
                  --set primary.persistence.enabled=true \\
                  --set primary.persistence.size=1Gi
                """
            }
        }

        stage('Create DB Secrets for TEST') {
            steps {
                sh """
                kubectl create secret generic bank-app-common-db-postgresql \\
                  --from-literal=password=${DB_PASSWORD} \\
                  --from-literal=postgresql-password=${DB_PASSWORD} \\
                  --from-literal=postgres-password=${DB_PASSWORD} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Create Keycloak Realm ConfigMap on TEST') {
            steps {
                sh """
                kubectl create configmap bank-app-keycloak-realm \\
                  --from-file=realm-export.json=./bank-app-helm-chart/files/realm-export.json \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Install Keycloak to TEST') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install keycloak bitnami/keycloak \\
                  --version 24.8.1 \\
                  --namespace test --create-namespace \\
                  --set auth.createAdminUser=true \\
                  --set auth.adminUser=admin \\
                  --set auth.adminPassword=admin \\
                  --set postgresql.enabled=true \\
                  --set postgresql.auth.username=bn_keycloak \\
                  --set postgresql.auth.password=mySuperSecretPass \\
                  --set postgresql.auth.database=bitnami_keycloak \\
                  --set postgresql.primary.persistence.enabled=true \\
                  --set postgresql.primary.persistence.size=1Gi \\
                  --set service.type=ClusterIP \\
                  --set service.ports.http=8080 \\
                  --set ingress.enabled=true \\
                  --set ingress.ingressClassName=nginx \\
                  --set ingress.hostname=keycloak.myapp.local \\
                  --set ingress.path=/ \\
                  --set ingress.pathType=ImplementationSpecific \\
                  --set keycloakConfigCli.enabled=true \\
                  --set keycloakConfigCli.existingConfigmap=bank-app-keycloak-realm \\
                  --set extraEnvVars[0].name=KC_HOSTNAME \\
                  --set extraEnvVars[0].value=keycloak.test.svc.cluster.local \\
                  --set extraEnvVars[1].name=KC_HOSTNAME_STRICT \\
                  --set-string extraEnvVars[1].value=true
                """
            }
        }
    }
}